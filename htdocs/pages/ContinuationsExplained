`(
(p "If you come from non-lispy languages you may never have heard of continuations. Continuations are conceptually very simple. They're basically glorified returns: "
	,(to-string (call/cc (lambda (c) (c 'value) ))  )
	"Calling \"c\" escapes the current continuation with the given 'value. A more complex case would be"
	,(to-string
		(let ([some-value 10])
			(call/cc
				(lambda (c)
					(if (> some-value 5)
						(c "Result 1")
						(c "Result 2"))))))

	,(to-string
		(let ([some-value 3])
			(call/cc
				(lambda (c)
					(if (> some-value 5)
						(c "Result 1")
						(c "Result 2"))))))

	"The continuation generalizes the concept of returning, as the continuation functions can be passed to other functions,
	you're giving some functions an escape hatch by which to return."

	,(to-string
		(letrec ([some-value 8]
					[safe-fibonacci (lambda (n c)
						(cond
							[(> n 30) (c "The number is too large")]
							[(> n 1) (+ (safe-fibonacci (- n 1) c) (safe-fibonacci (- n 2) c))]
							[else 1]))])
			(let/cc c
				(safe-fibonacci 31 c)
				)))

	"Note that let/cc is a macro for call/cc that creates a lambda for you.
	So " (code "(call/cc (lambda (x) e)) = (let/cc x e)") ". The fibonacci function returned that the number is too large. But why not return normally?
	Well we could, but imagine a deep call-stack. How are you going to handle all return cases?
	Answer is you don't, you just provide a continuation that escapes the entire stack.")
(p "I've chosen to ignore more advanced uses of continuations (like coroutines) for simplicity's sake")
)
